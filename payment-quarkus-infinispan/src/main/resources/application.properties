# Quarkus
%dev.quarkus.http.port=8080
%dev.quarkus.http.host=0.0.0.0
quarkus.vertx.event-loops-pool-size=100
quarkus.vertx.worker-pool-size=100
quarkus.vertx.max-event-loop-execute-time=180S

# Infinispan
%dev.quarkus.infinispan-client.server-list=localhost:11222
quarkus.infinispan-client.server-list=example-infinispan:11222
quarkus.infinispan-client.use-auth=false
quarkus.infinispan-client.client-intelligence=HASH_DISTRIBUTION_AWARE

# Kafka
%dev.kafka.bootstrap.servers=localhost:9092
kafka.bootstrap.servers=my-cluster-kafka-bootstrap:9092
quarkus.kafka-streams.topics=payment
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG

# Kafka???????????
mp.messaging.outgoing.payment.connector=smallrye-kafka
mp.messaging.outgoing.payment.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.payment.topic=payment
#mp.messaging.outgoing.payment.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor


# Service Mesh
#quarkus.jaeger.enabled=false
#quarkus.jaeger.service-name=payment
#quarkus.jaeger.sampler-type=const
#quarkus.jaeger.sampler-param=1
#quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

#RDBMS???
quarkus.datasource.db-kind=postgresql
# add ':tracing' to your database URL
quarkus.datasource.jdbc.url=jdbc:tracing:postgresql://localhost:5432/mydatabase
# use the 'TracingDriver' instead of the one for your database
#quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver
# configure Hibernate dialect
quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect


